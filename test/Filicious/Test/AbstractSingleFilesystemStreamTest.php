<?php

/**
 * High level object oriented filesystem abstraction.
 *
 * @package filicious-core
 * @author  Tristan Lins <tristan.lins@bit3.de>
 * @author  Christian Schiffler <c.schiffler@cyberspectrum.de>
 * @author  Oliver Hoff <oliver@hofff.com>
 * @link    http://filicious.org
 * @license http://www.gnu.org/licenses/lgpl-3.0.html LGPL
 */

namespace Filicious\Test;

require_once(__DIR__ . '/../../bootstrap.php');

use Filicious\Stream;
use Filicious\Iterator\FilesystemIterator;
use PHPUnit_Framework_TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-10-17 at 10:24:36.
 */
abstract class AbstractSingleFilesystemStreamTest extends PHPUnit_Framework_TestCase
{
	/**
	 * @var SingleFilesystemTestEnvironment
	 */
	protected $environment;

	/**
	 * @var TestAdapter
	 */
	protected $adapter;

	/**
	 * @var \Filicious\Filesystem
	 */
	protected $fs;

	protected $files = array(
		'example.txt',
		'zap/file.txt',
	);

	protected $contents = array(
		'example.txt'  => 'The world is like a pizza!',
		'zap/file.txt' => 'Hello World!',
	);

	protected $dirs = array(
		'foo',
		'foo/bar',
		'zap',
	);

	protected $links = array(
		'foo/file.lnk' => 'file',
		'zap/bar.lnk'  => 'dir',
	);

	protected $notExists = array(
		'does_not_exists.missing',
		'foo/does_not_exists.missing',
		'foo/bar/does_not_exists.missing',
		'zap/does_not_exists.missing',
	);

	/**
	 * @return SingleFilesystemTestEnvironment
	 */
	abstract protected function setUpEnvironment();

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{
		$this->environment = $this->setUpEnvironment();
		$this->adapter     = $this->environment->getAdapter();
		$this->fs          = $this->environment->getFilesystem();

		// create directory <path>/foo/bar/
		$this->adapter->createDirectory('/foo');
		$this->adapter->createDirectory('/foo/bar');

		// create directory <path>/zap
		$this->adapter->createDirectory('/zap');

		// create file <path>/example.txt
		$this->adapter->putContents('/example.txt', $this->contents['example.txt']);

		// create file <path>/zap/file.txt
		$this->adapter->putContents('/zap/file.txt', $this->contents['zap/file.txt']);

		if ($this->adapter->isSymlinkSupported()) {
			// create link <path>/foo/zap.lnk -> ../zap/file.txt
			$this->adapter->symlink('../zap/file.txt', '/foo/file.lnk');

			// create link <path>/zap/bar.lnk -> ../foo/bar/
			$this->adapter->symlink('../foo/bar/', '/zap/bar.lnk');
		}
	}

	protected function tearDown()
	{
		$this->environment->cleanup();
	}

	/**
	 * @covers Filicious\File::getStream()
	 */
	public function testGetStream()
	{
		// test files
		foreach ($this->files as $pathname) {
			$file   = $this->fs->getFile($pathname);
			$stream = $file->getStream();
			$this->assertTrue($stream instanceof Stream);
		}

		// test directories
		foreach ($this->dirs as $pathname) {
			$file   = $this->fs->getFile($pathname);
			$stream = $file->getStream();
			$this->assertTrue($stream instanceof Stream);
		}

		if ($this->adapter->isSymlinkSupported()) {
			// test links
			foreach ($this->links as $pathname => $type) {
				$file   = $this->fs->getFile($pathname);
				$stream = $file->getStream();
				$this->assertTrue($stream instanceof Stream);
			}
		}
		else {
			$this->markTestSkipped('Skip Symlink::getStream() test, symlinks not supported.');
		}

		// test non existing files
		foreach ($this->notExists as $pathname) {
			$file   = $this->fs->getFile($pathname);
			$stream = $file->getStream();
			$this->assertTrue($stream instanceof Stream);
		}
	}

	/**
	 * @covers Filicious\Stream::open()
	 * @covers Filicious\Stream::close()
	 */
	public function testStreamOpenClose()
	{
		// test files
		foreach ($this->files as $pathname) {
			$file  = $this->fs->getFile($pathname);
			$url   = $file->getURL();
			$resource = fopen($url, 'r');
			var_dump($resource);
			fclose($resource);
		}
	}
}
